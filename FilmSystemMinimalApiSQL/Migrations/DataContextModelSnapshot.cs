// <auto-generated />
using FilmSystemMinimalApiSQL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FilmSystemMinimalApiSQL.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FilmSystemMinimalApiSQL.Models.GenreList", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("GenreLists");
                });

            modelBuilder.Entity("FilmSystemMinimalApiSQL.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"), 1L, 1);

                    b.Property<int>("FkGenreIdGenreId")
                        .HasColumnType("int");

                    b.Property<int>("FkUserIdUserId")
                        .HasColumnType("int");

                    b.Property<string>("MovieLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MovieId");

                    b.HasIndex("FkGenreIdGenreId");

                    b.HasIndex("FkUserIdUserId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("FilmSystemMinimalApiSQL.Models.UserChoice", b =>
                {
                    b.Property<int>("ChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChoiceId"), 1L, 1);

                    b.Property<int>("FkGenreIdGenreId")
                        .HasColumnType("int");

                    b.Property<int>("FkUserIdUserId")
                        .HasColumnType("int");

                    b.HasKey("ChoiceId");

                    b.HasIndex("FkGenreIdGenreId");

                    b.HasIndex("FkUserIdUserId");

                    b.ToTable("UserChoices");
                });

            modelBuilder.Entity("FilmSystemMinimalApiSQL.Models.UserList", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserLists");
                });

            modelBuilder.Entity("FilmSystemMinimalApiSQL.Models.Movie", b =>
                {
                    b.HasOne("FilmSystemMinimalApiSQL.Models.GenreList", "FkGenreId")
                        .WithMany()
                        .HasForeignKey("FkGenreIdGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmSystemMinimalApiSQL.Models.UserList", "FkUserId")
                        .WithMany()
                        .HasForeignKey("FkUserIdUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FkGenreId");

                    b.Navigation("FkUserId");
                });

            modelBuilder.Entity("FilmSystemMinimalApiSQL.Models.UserChoice", b =>
                {
                    b.HasOne("FilmSystemMinimalApiSQL.Models.GenreList", "FkGenreId")
                        .WithMany()
                        .HasForeignKey("FkGenreIdGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmSystemMinimalApiSQL.Models.UserList", "FkUserId")
                        .WithMany()
                        .HasForeignKey("FkUserIdUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FkGenreId");

                    b.Navigation("FkUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
