using FilmSystemMinimalApiSQL.Data;
using FilmSystemMinimalApiSQL.Models;
using Microsoft.EntityFrameworkCore;

namespace FilmSystemMinimalApiSQL
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.

            // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
            builder.Services.AddEndpointsApiExplorer();
            builder.Services.AddSwaggerGen();

            builder.Services.AddDbContext<DataContext>(options =>
                options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

            var app = builder.Build();

            // Configure the HTTP request pipeline.
            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();
                app.UseSwaggerUI();
            }

            app.UseHttpsRedirection();

            //Get to Try out the routing
            app.MapGet("/", () => "Welcome to Film System Minimal API SQL and TMDB");

            //Get all GenreList Items
            app.MapGet("/api/GenreList", async (DataContext context) => await context.GenreLists.ToListAsync());

            //Get GenreList Items by id
            app.MapGet("/api/GenreList/{GenreId}", async (DataContext context, int GenreId) =>
                await context.GenreLists.FindAsync(GenreId) is GenreList genreList ? Results.Ok(genreList) : Results.NotFound("GenreList item not found ./"));

            //Create GenreList Items 
            app.MapPost("/api/GenreList", async (DataContext context, GenreList genreList) =>
            {
                context.GenreLists.Add(genreList);
                await context.SaveChangesAsync();
                return Results.Created($"/api/genreList/{genreList.GenreId}", genreList);
            });

            //Updating GenreList Items
            app.MapPut("/api/GenreList/{GenreId}", async (DataContext context, GenreList genreList, int GenreId) =>
            {
                var genreListFromDb = await context.GenreLists.FindAsync(GenreId);

                if (genreListFromDb != null)
                {
                    genreListFromDb.Title = genreList.Title;
                    genreListFromDb.Description = genreList.Description;

                    await context.SaveChangesAsync();
                    return Results.Ok(genreList);
                }
                return Results.NotFound("genreList not found");
            });


            //Deleting GenreList Items
            app.MapDelete("/api/GenreList/{GenreId}", async (DataContext context, int GenreId) =>
            {
                var genreListFromDb = await context.GenreLists.FindAsync(GenreId);

                if (genreListFromDb != null)
                {
                    context.Remove(genreListFromDb);
                    await context.SaveChangesAsync();
                    return Results.Ok();
                }
                return Results.NotFound("GenreList not found");
            });

            //Get all UserList Items
            app.MapGet("/api/UserList", async (DataContext context) => await context.UserLists.ToListAsync());

            //Get all UserChoice Items
            app.MapGet("/api/UserChoices/{ChoiceId}", async (DataContext context) => await context.UserChoices.ToListAsync());

            ////Get UserChoices Items by id
            //app.MapGet("/api/UserChoices/{ChoiceId}", async (DataContext context, int ChoiceId) =>
            //    await context.UserChoices.FindAsync(ChoiceId) is UserChoice userChoice ? Results.Ok(userChoice) : Results.NotFound("UserChoices item not found./"));

            //Get all Movie List
            app.MapGet("/api/Movie store", async (DataContext context) => await context.Movies.ToListAsync());

            // Get all Movie List by Id
            app.MapGet("/api/Movies Store/ {MoviesId}", async (DataContext context, int MovieId) =>
                await context.Movies.FindAsync(MovieId) is Movie movie ? Results.Ok(MovieId) : Results.NotFound("Movie is not available./"));

            //Get MovieList Items by id
            app.MapGet("/api/Movie/{MovieId}", async (DataContext context, int MovieId) =>
                await context.Movies.FindAsync(MovieId) is Movie movie ? Results.Ok(movie) : Results.NotFound("Movie is not found ./"));

                //Get all PersonChoise Items
            app.MapGet("/api/PersonChoise", async (DataContext context) => await context.PersonChoises.ToListAsync());

            //Get PersonChoise Items by id
            app.MapGet("/api/PersonChoise/{ID}", async (DataContext context, int ID) =>
                await context.PersonChoises.FindAsync(ID) is PersonChoise personChoise ? Results.Ok(personChoise) : Results.NotFound("PersonChoise are not Found./"));

            //Create PersonChoise Items 
            app.MapPost("/api/PersonChoise", async (DataContext context, PersonChoise personChoise) =>
            {
                context.PersonChoises.Add(personChoise);
                await context.SaveChangesAsync();
                return Results.Created($"/api/PersonChoise/{personChoise.ID}", personChoise);
            });

            //Updating PersonChoise Items
            app.MapPut("/api/PersonChoise/{ID}", async (DataContext context, PersonChoise personChoise, int ID) =>
            {
                var personChoiseFromDb = await context.PersonChoises.FindAsync(ID);

                if (personChoiseFromDb != null)
                {
                    personChoiseFromDb.PersonID = personChoise.PersonID;
                    personChoiseFromDb.GenreID = personChoise.GenreID;

                    await context.SaveChangesAsync();
                    return Results.Ok(personChoise);
                }
                return Results.NotFound("PersonChoise not found");
            });


            //Deleting PersonChoise Items
            app.MapDelete("/api/PersonChoise/{ID}", async (DataContext context, int ID) =>
            {
                var personChoiseFromDb = await context.PersonChoises.FindAsync(ID);

                if (personChoiseFromDb != null)
                {
                    context.Remove(personChoiseFromDb);
                    await context.SaveChangesAsync();
                    return Results.Ok();
                }
                return Results.NotFound("PersonChoise not found");
            });

             //Get all Person Items
            app.MapGet("/api/Person", async (DataContext context) => await context.Persons.ToListAsync());

            //Get Person Items by id
            app.MapGet("/api/Person/{ID}", async (DataContext context, int ID) =>
                await context.Persons.FindAsync(ID) is Person person ? Results.Ok(person) : Results.NotFound("Person are not Found./"));

            //Create Person Items 
            app.MapPost("/api/Person", async (DataContext context, Person person) =>
            {
                context.Persons.Add(person);
                await context.SaveChangesAsync();
                return Results.Created($"/api/person/{person.ID}", person);
            });

            //Updating Person Items
            app.MapPut("/api/Person/{ID}", async (DataContext context, Person person, int ID) =>
            {
                var personFromDb = await context.Persons.FindAsync(ID);

                if (personFromDb != null)
                {
                    personFromDb.Name = person.Name;
                    personFromDb.Email = person.Email;

                    await context.SaveChangesAsync();
                    return Results.Ok(person);
                }
                return Results.NotFound("Person not found");
            });


            //Deleting Person Items
            app.MapDelete("/api/Person/{ID}", async (DataContext context, int ID) =>
            {
                var personFromDb = await context.Persons.FindAsync(ID);

                if (personFromDb != null)
                {
                    context.Remove(personFromDb);
                    await context.SaveChangesAsync();
                    return Results.Ok();
                }
                return Results.NotFound("Person not found");
            });


            app.Run();
        }
    }
}